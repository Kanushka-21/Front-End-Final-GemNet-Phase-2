import React, { useState, useEffect } from 'react';
import { 
  Card, Row, Col, Statistic, Table, Button, Tag, Modal, Form, 
  Input, Select, Upload, InputNumber, 
  message, Tabs, Progress, Alert, Divider, Badge, 
  DatePicker, TimePicker, Space, Descriptions, Switch
} from 'antd';
import { 
  PlusOutlined, DollarOutlined, EyeOutlined, EditOutlined, 
  DeleteOutlined, ShopOutlined, CalendarOutlined, UploadOutlined,
  RobotOutlined, TrophyOutlined, LineChartOutlined, CheckOutlined,
  CloseOutlined, FileTextOutlined, FilePdfOutlined, ShopFilled
} from '@ant-design/icons';
import type { ColumnsType } from 'antd/es/table';
import type { UploadFile, RcFile } from 'antd/es/upload/interface';
import DashboardLayout from '@/components/layout/DashboardLayout';
import { DetailedGemstone, PricePrediction } from '@/types';
import { api } from '@/services/api';

const { TabPane } = Tabs;
const { Option } = Select;

interface SellerStats {
  totalListings: number;
  activeBids: number;
  totalSales: number;
  revenue: number;
  upcomingMeetings: number;
}

const SellerDashboard: React.FC = () => {
  const [loading, setLoading] = useState(true);
  const [listings, setListings] = useState<DetailedGemstone[]>([]);
  const [stats, setStats] = useState<SellerStats>({
    totalListings: 0,
    activeBids: 0,
    totalSales: 0,
    revenue: 0,
    upcomingMeetings: 0
  });
  
  // Add Listing Modal
  const [addListingVisible, setAddListingVisible] = useState(false);
  const [listingForm] = Form.useForm();
  const [uploadedImages, setUploadedImages] = useState<UploadFile[]>([]);
  const [certificateFile, setCertificateFile] = useState<UploadFile | null>(null);
  
  // ML Price Prediction
  const [priceLoading, setPriceLoading] = useState(false);
  const [pricePrediction, setPricePrediction] = useState<PricePrediction | null>(null);
  const [showPrediction, setShowPrediction] = useState(false);
  
  // Store Management
  const [storeModalVisible, setStoreModalVisible] = useState(false);
  const [storeForm] = Form.useForm();
  const [storeLogoFile, setStoreLogoFile] = useState<UploadFile | null>(null);
  
  // Buyer confirmation
  const [buyerConfirmationModalVisible, setBuyerConfirmationModalVisible] = useState(false);
  const [selectedBuyer, setSelectedBuyer] = useState<any>(null);
  const [pendingConfirmations, setPendingConfirmations] = useState<any[]>([]);

  useEffect(() => {
    fetchDashboardData();
  }, []);
  
  const fetchDashboardData = async () => {
    setLoading(true);
    try {
      const [
        listingsResponse, 
        statsResponse, 
        pendingConfirmationsResponse
      ] = await Promise.all([
        api.getSellerListings(),
        api.getSellerStats(),
        api.getSellerPendingConfirmations()
      ]);

      setListings(listingsResponse.data || []);
      setStats(statsResponse.data || stats);
      setPendingConfirmations(pendingConfirmationsResponse.data || []);
    } catch (error) {
      console.error('Error fetching seller dashboard data:', error);
      message.error('Failed to load dashboard data');
    } finally {
      setLoading(false);
    }
  };

  // Additional form fields for gemstone listing
  const gemVarieties = [
    'Sapphire', 'Ruby', 'Emerald', 'Diamond', 'Topaz', 
    'Amethyst', 'Citrine', 'Aquamarine', 'Opal', 'Peridot'
  ];
  
  const gemColors = [
    'Blue', 'Red', 'Green', 'Yellow', 'Purple',
    'Pink', 'Orange', 'White', 'Black', 'Brown'
  ];
  
  const gemShapes = [
    'Round', 'Oval', 'Cushion', 'Emerald', 'Princess',
    'Pear', 'Marquise', 'Heart', 'Radiant', 'Asscher'
  ];
  
  // Request price prediction
  const requestPricePrediction = async () => {
    const formValues = listingForm.getFieldsValue();
    
    if (!formValues.weight || !formValues.color || !formValues.clarity || !formValues.cut) {
      message.error('Please fill in weight, color, clarity and cut fields to get a price prediction');
      return;
    }
    
    setPriceLoading(true);
    
    try {
      // Request price prediction from ML model
      const predictionResponse = await api.predictGemstonePrice({
        variety: formValues.variety,
        weight: formValues.weight,
        color: formValues.color,
        clarity: formValues.clarity,
        cut: formValues.cut,
        origin: formValues.origin || 'Sri Lanka'
      });
      
      if (predictionResponse.success && predictionResponse.data) {
        setPricePrediction(predictionResponse.data);
        setShowPrediction(true);
      } else {
        message.error('Unable to get price prediction');
      }
    } catch (error) {
      message.error('Failed to get price prediction');
      console.error('Price prediction error:', error);
    } finally {
      setPriceLoading(false);
    }
  };
  
  // Handle store logo upload
  const handleStoreLogoUpload = (info: any) => {
    if (info.file.status === 'done') {
      setStoreLogoFile(info.file);
      message.success(`${info.file.name} logo uploaded successfully`);
    } else if (info.file.status === 'error') {
      message.error(`${info.file.name} logo upload failed`);
    }
  };

  // Update store information
  const handleUpdateStore = () => {
    storeForm.validateFields().then(async (values) => {
      try {
        const formData = new FormData();
        
        // Add form fields
        Object.keys(values).forEach(key => {
          if (values[key] !== undefined && values[key] !== null) {
            formData.append(key, values[key]);
          }
        });
        
        // Add store logo
        if (storeLogoFile?.originFileObj) {
          formData.append('storeLogo', storeLogoFile.originFileObj);
        }
        
        await api.updateSellerStore(formData);
        message.success('Store information updated successfully');
        setStoreModalVisible(false);
      } catch (error) {
        console.error('Error updating store:', error);
        message.error('Failed to update store information');
      }
    });
  };
  
  // Confirm buyer for a listing
  const handleConfirmBuyer = async (buyerId: string, listingId: string) => {
    try {
      await api.confirmBuyer(listingId, buyerId);
      message.success('Buyer confirmed successfully');
      fetchDashboardData();
      setBuyerConfirmationModalVisible(false);
    } catch (error) {
      console.error('Error confirming buyer:', error);
      message.error('Failed to confirm buyer');
    }
  };
  
  // Handle gemstone certificate upload
  const handleCertificateUpload = (info: any) => {
    if (info.file.status === 'done') {
      setCertificateFile(info.file);
      message.success(`${info.file.name} certificate uploaded successfully`);
    } else if (info.file.status === 'error') {
      message.error(`${info.file.name} certificate upload failed`);
    }
  };
  
  const handleSubmitListing = async (values: any) => {
    try {
      const formData = new FormData();
      
      // Add form fields
      Object.keys(values).forEach(key => {
        if (values[key] !== undefined && values[key] !== null) {
          if (typeof values[key] === 'object' && !(values[key] instanceof Date)) {
            formData.append(key, JSON.stringify(values[key]));
          } else {
            formData.append(key, values[key]);
          }
        }
      });
      
      // Add images
      uploadedImages.forEach((file) => {
        if (file.originFileObj) {
          formData.append(`images`, file.originFileObj);
        }
      });

      // Add certificate
      if (certificateFile?.originFileObj) {
        formData.append('certificate', certificateFile.originFileObj);
      }

      await api.createListing(formData);
      message.success('Listing created successfully!');
      setAddListingVisible(false);
      listingForm.resetFields();
      setUploadedImages([]);
      setCertificateFile(null);
      setPricePrediction(null);
      setShowPrediction(false);
      fetchDashboardData();
    } catch (error) {
      console.error('Error creating listing:', error);
      message.error('Failed to create listing');
    }
  };

  const handleDeleteListing = async (listingId: string) => {
    try {
      await api.deleteListing(listingId);
      message.success('Listing deleted successfully');
      fetchDashboardData();
    } catch (error) {
      message.error('Failed to delete listing');
    }
  };

  const beforeUpload = (file: RcFile): boolean => {
    const isImage = file.type.startsWith('image/');
    if (!isImage) {
      message.error('You can only upload image files!');
    }
    const isLt5M = file.size / 1024 / 1024 < 5;
    if (!isLt5M) {
      message.error('Image must be smaller than 5MB!');
    }
    return isImage && isLt5M;
  };

  const listingColumns: ColumnsType<DetailedGemstone> = [
    {
      title: 'Gemstone',
      key: 'gemstone',
      render: (_, record) => (
        <div className="flex items-center">
          {record.images && record.images[0] && (
            <img
              src={record.images[0]}
              alt={record.name}
              className="w-10 h-10 rounded-md mr-3 object-cover"
            />
          )}
          <span>{record.name}</span>
        </div>
      )
    },
    {
      title: 'Details',
      key: 'details',
      render: (_, record) => (
        <>
          <div>{record.variety} - {record.weight} carats</div>
          <div className="text-gray-500">Color: {record.color}, Shape: {record.shape}</div>
        </>
      )
    },
    {
      title: 'Price',
      dataIndex: 'price',
      key: 'price',
      render: (price) => `$${price.toLocaleString()}`
    },
    {
      title: 'Status',
      key: 'status',
      render: (_, record) => (
        <Tag color={
          record.status === 'active' ? 'green' :
          record.status === 'sold' ? 'blue' :
          record.status === 'pending' ? 'orange' : 'red'
        }>
          {record.status?.toUpperCase() || 'DRAFT'}
        </Tag>
      )
    },
    {
      title: 'Certificate',
      key: 'certificate',
      render: (_, record) => (
        record.hasCertificate ? (
          <Tag color="green">CERTIFIED</Tag>
        ) : (
          <Tag color="default">NO CERTIFICATE</Tag>
        )
      )
    },
    {
      title: 'Actions',
      key: 'action',
      render: (_, record) => (
        <Space size="small">
          <Button
            type="text"
            size="small"
            icon={<EyeOutlined />}
            onClick={() => {
              // View listing details
              message.info(`Viewing ${record.name} details`);
            }}
          />
          <Button
            type="text"
            size="small"
            icon={<EditOutlined />}
            onClick={() => {
              // Edit listing logic
              message.info(`Editing ${record.name}`);
            }}
          />
          <Button
            type="text"
            size="small"
            danger
            icon={<DeleteOutlined />}
            onClick={() => handleDeleteListing(record.id)}
          />
        </Space>
      ),
    },
  ];

  return (
    <DashboardLayout>
      <div className="p-6">
        <div className="mb-8">
          <h1 className="text-2xl font-bold text-gray-800 mb-2">Seller Dashboard</h1>
          <p className="text-gray-600">Manage your gemstone listings and sales</p>
        </div>

        {/* Stats Cards */}
        <Row gutter={[16, 16]} className="mb-6">
          <Col xs={24} sm={12} lg={8}>
            <Card>
              <Statistic
                title="Total Listings"
                value={stats.totalListings}
                prefix={<ShopOutlined />}
                valueStyle={{ color: '#3f8600' }}
              />
            </Card>
          </Col>
          <Col xs={24} sm={12} lg={8}>
            <Card>
              <Statistic
                title="Active Bids"
                value={stats.activeBids}
                prefix={<TrophyOutlined />}
                valueStyle={{ color: '#096dd9' }}
              />
            </Card>
          </Col>
          <Col xs={24} sm={12} lg={8}>
            <Card>
              <Statistic
                title="Total Sales"
                value={stats.revenue}
                prefix="$"
                precision={2}
                valueStyle={{ color: '#3f8600' }}
              />
            </Card>
          </Col>
        </Row>

        {/* Quick Actions */}
        <Card className="mb-6" title="Quick Actions">
          <Row gutter={[16, 16]}>
            <Col xs={24} sm={8}>
              <Button 
                type="primary" 
                icon={<PlusOutlined />} 
                block
                onClick={() => setAddListingVisible(true)}
              >
                Add New Listing
              </Button>
            </Col>
            <Col xs={24} sm={8}>
              <Button 
                icon={<ShopOutlined />} 
                block
                onClick={() => {
                  storeForm.resetFields();
                  setStoreModalVisible(true);
                }}
              >
                Manage Store
              </Button>
            </Col>
            <Col xs={24} sm={8}>
              <Button 
                icon={<CalendarOutlined />} 
                block
                onClick={() => {
                  message.info('Viewing upcoming meetings');
                }}
              >
                View Upcoming Meetings
              </Button>
            </Col>
          </Row>
        </Card>

        {/* Main Dashboard Tabs */}
        <Tabs defaultActiveKey="listings">
          <TabPane tab={<span><ShopOutlined /> Listings Management</span>} key="listings">
            <Card>
              <div className="mb-4 flex justify-between items-center">
                <Button 
                  type="primary" 
                  icon={<PlusOutlined />}
                  onClick={() => setAddListingVisible(true)}
                >
                  Add New Listing
                </Button>
              </div>

              <Table
                loading={loading}
                dataSource={listings}
                rowKey="id"
                pagination={{ pageSize: 10 }}
                columns={listingColumns}
              />
            </Card>
          </TabPane>
          
          <TabPane tab={<span><ShopFilled /> Store Management</span>} key="store">
            <Card>
              <div className="mb-6">
                <h3 className="text-lg font-medium mb-2">Your Store Information</h3>
                <p className="text-gray-600 mb-4">Manage your store details and appearance</p>
                
                <Button 
                  type="primary"
                  icon={<EditOutlined />}
                  onClick={() => setStoreModalVisible(true)}
                >
                  Edit Store Information
                </Button>
              </div>
              
              <Row gutter={[16, 16]}>
                <Col xs={24} sm={12}>
                  <Card title="Store Profile" bordered={false}>
                    <div className="text-center mb-4">
                      <div className="inline-block p-2 rounded-full bg-gray-100 mb-2">
                        <ShopOutlined style={{ fontSize: 32 }} />
                      </div>
                      <h4 className="font-medium">Gem Paradise</h4>
                      <p className="text-gray-500">Premium Gemstone Dealer</p>
                    </div>
                    
                    <Descriptions column={1}>
                      <Descriptions.Item label="Owner">John Doe</Descriptions.Item>
                      <Descriptions.Item label="Location">Colombo, Sri Lanka</Descriptions.Item>
                      <Descriptions.Item label="Established">2021</Descriptions.Item>
                      <Descriptions.Item label="Rating">4.8/5</Descriptions.Item>
                      <Descriptions.Item label="Total Listings">12</Descriptions.Item>
                      <Descriptions.Item label="Total Sales">$25,600</Descriptions.Item>
                    </Descriptions>
                  </Card>
                </Col>
                <Col xs={24} sm={12}>
                  <Card title="Store Analytics" bordered={false}>
                    <div className="mb-4">
                      <div className="flex justify-between mb-2">
                        <span>Store Views</span>
                        <span>245</span>
                      </div>
                      <Progress percent={70} />
                    </div>
                    <div className="mb-4">
                      <div className="flex justify-between mb-2">
                        <span>Listing Views</span>
                        <span>1,245</span>
                      </div>
                      <Progress percent={85} />
                    </div>
                    <div className="mb-4">
                      <div className="flex justify-between mb-2">
                        <span>Bids Received</span>
                        <span>23</span>
                      </div>
                      <Progress percent={50} />
                    </div>
                    <div>
                      <div className="flex justify-between mb-2">
                        <span>Conversion Rate</span>
                        <span>15%</span>
                      </div>
                      <Progress percent={15} />
                    </div>
                  </Card>
                </Col>
              </Row>
            </Card>
          </TabPane>
          
          <TabPane tab={<span><LineChartOutlined /> Price Prediction</span>} key="prediction">
            <Card>
              <div className="mb-6">
                <h3 className="text-lg font-medium mb-2">Gemstone Price Prediction</h3>
                <p className="text-gray-600 mb-4">Use our AI model to predict the optimal price for your gemstones</p>
              </div>
              
              <Form layout="vertical" onFinish={requestPricePrediction}>
                <Row gutter={16}>
                  <Col xs={24} sm={8}>
                    <Form.Item 
                      name="variety" 
                      label="Gemstone Variety"
                      rules={[{ required: true, message: 'Please select gemstone variety' }]}
                    >
                      <Select placeholder="Select variety">
                        {gemVarieties.map(variety => (
                          <Option key={variety} value={variety}>{variety}</Option>
                        ))}
                      </Select>
                    </Form.Item>
                  </Col>
                  <Col xs={24} sm={8}>
                    <Form.Item 
                      name="weight" 
                      label="Weight (carats)"
                      rules={[{ required: true, message: 'Please enter weight' }]}
                    >
                      <InputNumber
                        min={0.01}
                        step={0.01}
                        style={{ width: '100%' }}
                        placeholder="e.g., 2.5"
                      />
                    </Form.Item>
                  </Col>
                  <Col xs={24} sm={8}>
                    <Form.Item 
                      name="color" 
                      label="Color"
                      rules={[{ required: true, message: 'Please select color' }]}
                    >
                      <Select placeholder="Select color">
                        {gemColors.map(color => (
                          <Option key={color} value={color}>{color}</Option>
                        ))}
                      </Select>
                    </Form.Item>
                  </Col>
                  <Col xs={24} sm={8}>
                    <Form.Item 
                      name="clarity" 
                      label="Clarity"
                      rules={[{ required: true, message: 'Please select clarity' }]}
                    >
                      <Select placeholder="Select clarity">
                        <Option value="VS">VS (Very Slightly Included)</Option>
                        <Option value="SI">SI (Slightly Included)</Option>
                        <Option value="VVS">VVS (Very, Very Slightly Included)</Option>
                        <Option value="IF">IF (Internally Flawless)</Option>
                        <Option value="FL">FL (Flawless)</Option>
                      </Select>
                    </Form.Item>
                  </Col>
                  <Col xs={24} sm={8}>
                    <Form.Item 
                      name="cut" 
                      label="Cut"
                      rules={[{ required: true, message: 'Please select cut' }]}
                    >
                      <Select placeholder="Select cut">
                        {gemShapes.map(shape => (
                          <Option key={shape} value={shape}>{shape}</Option>
                        ))}
                      </Select>
                    </Form.Item>
                  </Col>
                  <Col xs={24} sm={8}>
                    <Form.Item 
                      name="origin" 
                      label="Origin"
                    >
                      <Select placeholder="Select origin" defaultValue="Sri Lanka">
                        <Option value="Sri Lanka">Sri Lanka</Option>
                        <Option value="Thailand">Thailand</Option>
                        <Option value="Myanmar">Myanmar</Option>
                        <Option value="India">India</Option>
                        <Option value="Brazil">Brazil</Option>
                        <Option value="Other">Other</Option>
                      </Select>
                    </Form.Item>
                  </Col>
                </Row>
                <Form.Item>
                  <Button
                    type="primary"
                    icon={<RobotOutlined />}
                    onClick={requestPricePrediction}
                    loading={priceLoading}
                  >
                    Get Price Prediction
                  </Button>
                </Form.Item>
              </Form>
              
              {showPrediction && pricePrediction ? (
                <Alert
                  type="success"
                  showIcon
                  message="Price Prediction Results"
                  description={
                    <div>
                      <p className="text-lg font-semibold">
                        Estimated Price: ${pricePrediction.price?.toLocaleString() || '0'}
                        {pricePrediction.confidenceInterval && (
                          <span className="text-sm text-gray-500 ml-2">
                            (±{pricePrediction.confidenceInterval}%)
                          </span>
                        )}
                      </p>
                      <p>
                        Price Range: ${pricePrediction.minPrice || '0'} - ${pricePrediction.maxPrice || '0'}
                      </p>
                      <Divider />
                      <p>This prediction is based on historical data and market trends. Actual market value may vary.</p>
                    </div>
                  }
                />
              ) : null}
            </Card>
          </TabPane>
          
          <TabPane tab={<span><FilePdfOutlined /> Certificate Management</span>} key="certificates">
            <Card>
              <div className="mb-6">
                <h3 className="text-lg font-medium mb-2">Gemstone Certificates</h3>
                <p className="text-gray-600 mb-4">Upload and manage certificates for your gemstones</p>
              </div>
              
              <Table
                loading={loading}
                dataSource={listings.filter(item => item.hasCertificate)}
                rowKey="id"
                pagination={{ pageSize: 10 }}
                columns={[
                  {
                    title: 'Gemstone',
                    dataIndex: 'name',
                    key: 'name',
                    render: (name, record) => (
                      <div className="flex items-center">
                        {record.images && record.images[0] && (
                          <img
                            src={record.images[0]}
                            alt={name}
                            className="w-10 h-10 rounded-full mr-3 object-cover"
                          />
                        )}
                        <span>{name}</span>
                      </div>
                    )
                  },
                  {
                    title: 'Certificate Type',
                    dataIndex: 'certificateType',
                    key: 'certificateType',
                    render: (type) => type || 'Standard'
                  },
                  {
                    title: 'Issue Date',
                    dataIndex: 'certificateIssueDate',
                    key: 'certificateIssueDate',
                    render: (date) => date || 'N/A'
                  },
                  {
                    title: 'Expiry Date',
                    dataIndex: 'certificateExpiryDate',
                    key: 'certificateExpiryDate',
                    render: (date) => date || 'N/A'
                  },
                  {
                    title: 'Status',
                    key: 'certificateStatus',
                    render: (_, record) => (
                      <Tag color={record.certificateVerified ? 'green' : 'orange'}>
                        {record.certificateVerified ? 'VERIFIED' : 'PENDING VERIFICATION'}
                      </Tag>
                    )
                  },
                  {
                    title: 'Actions',
                    key: 'actions',
                    render: (_, record) => (
                      <Space>
                        <Button
                          icon={<EyeOutlined />}
                          size="small"
                          onClick={() => {
                            if (record.certificateUrl) {
                              window.open(record.certificateUrl, '_blank');
                            } else {
                              message.warning('Certificate not available for preview');
                            }
                          }}
                        >
                          View
                        </Button>
                        <Button
                          icon={<UploadOutlined />}
                          size="small"
                          onClick={() => {
                            message.info(`Updating certificate for ${record.name}`);
                            // Add functionality to upload a new certificate
                          }}
                        >
                          Update
                        </Button>
                      </Space>
                    )
                  }
                ]}
              />
            </Card>
          </TabPane>
          
          <TabPane tab={<span><CalendarOutlined /> Meeting Schedules</span>} key="meetings">
            <Card>
              <div className="mb-6">
                <h3 className="text-lg font-medium mb-2">Upcoming Meetings</h3>
                <p className="text-gray-600 mb-4">View your scheduled meetings with buyers</p>
              </div>
              
              <Table
                loading={loading}
                dataSource={[]} // This would be populated with actual meeting data
                rowKey="id"
                pagination={{ pageSize: 10 }}
                columns={[
                  {
                    title: 'Gemstone',
                    dataIndex: 'gemstoneName',
                    key: 'gemstoneName'
                  },
                  {
                    title: 'Buyer',
                    dataIndex: 'buyerName',
                    key: 'buyerName'
                  },
                  {
                    title: 'Date',
                    dataIndex: 'scheduledDate',
                    key: 'scheduledDate'
                  },
                  {
                    title: 'Time',
                    dataIndex: 'scheduledTime',
                    key: 'scheduledTime'
                  },
                  {
                    title: 'Location',
                    dataIndex: 'location',
                    key: 'location'
                  },
                  {
                    title: 'Status',
                    dataIndex: 'status',
                    key: 'status',
                    render: (status) => (
                      <Tag color={
                        status === 'completed' ? 'green' :
                        status === 'scheduled' ? 'blue' : 'red'
                      }>
                        {status.toUpperCase()}
                      </Tag>
                    )
                  },
                  {
                    title: 'Actions',
                    key: 'actions',
                    render: (_, record) => (
                      <Button
                        icon={<EyeOutlined />}
                        size="small"
                        onClick={() => {
                          message.info(`Viewing details for meeting with ${record.buyerName}`);
                        }}
                      >
                        Details
                      </Button>
                    )
                  }
                ]}
              />
            </Card>
          </TabPane>
          
          <TabPane tab={<span><CheckOutlined /> Buyer Confirmations</span>} key="confirmations">
            <Card>
              <div className="mb-6">
                <h3 className="text-lg font-medium mb-2">Pending Buyer Confirmations</h3>
                <p className="text-gray-600 mb-4">Confirm buyers for your gemstone listings</p>
              </div>
              
              <Table
                loading={loading}
                dataSource={pendingConfirmations}
                rowKey="id"
                pagination={{ pageSize: 10 }}
                columns={[
                  {
                    title: 'Gemstone',
                    dataIndex: 'gemstoneName',
                    key: 'gemstoneName',
                    render: (name, record) => (
                      <div className="flex items-center">
                        {record.gemstoneImage && (
                          <img
                            src={record.gemstoneImage}
                            alt={name}
                            className="w-10 h-10 rounded mr-3 object-cover"
                          />
                        )}
                        <span>{name}</span>
                      </div>
                    )
                  },
                  {
                    title: 'Buyer',
                    dataIndex: 'buyerName',
                    key: 'buyerName'
                  },
                  {
                    title: 'Offer Amount',
                    dataIndex: 'offerAmount',
                    key: 'offerAmount',
                    render: (amount) => `$${amount.toLocaleString()}`
                  },
                  {
                    title: 'Offer Date',
                    dataIndex: 'offerDate',
                    key: 'offerDate'
                  },
                  {
                    title: 'Actions',
                    key: 'actions',
                    render: (_, record) => (
                      <Space>
                        <Button
                          type="primary"
                          icon={<CheckOutlined />}
                          size="small"
                          onClick={() => {
                            setSelectedBuyer(record);
                            handleConfirmBuyer(record.buyerId, record.gemstoneId);
                          }}
                        >
                          Confirm Buyer
                        </Button>
                        <Button
                          danger
                          icon={<CloseOutlined />}
                          size="small"
                          onClick={() => {
                            message.info(`Rejected buyer ${record.buyerName}`);
                          }}
                        >
                          Reject
                        </Button>
                      </Space>
                    )
                  }
                ]}
              />
            </Card>
          </TabPane>
        </Tabs>
      </div>

      {/* Add Listing Modal */}
      <Modal
        title="Add New Gemstone Listing"
        open={addListingVisible}
        onCancel={() => setAddListingVisible(false)}
        footer={null}
        width={800}
      >
        <Form
          form={listingForm}
          layout="vertical"
          onFinish={handleSubmitListing}
        >
          <Tabs>
            <TabPane tab="Basic Information" key="basic">
              <Row gutter={16}>
                <Col xs={24} sm={12}>
                  <Form.Item
                    name="name"
                    label="Gemstone Name"
                    rules={[{ required: true, message: 'Please enter gemstone name' }]}
                  >
                    <Input placeholder="e.g., Blue Sapphire" />
                  </Form.Item>
                </Col>
                <Col xs={24} sm={12}>
                  <Form.Item
                    name="variety"
                    label="Gemstone Variety"
                    rules={[{ required: true, message: 'Please select gemstone variety' }]}
                  >
                    <Select placeholder="Select variety">
                      {gemVarieties.map(variety => (
                        <Option key={variety} value={variety}>{variety}</Option>
                      ))}
                    </Select>
                  </Form.Item>
                </Col>
              </Row>
              <Row gutter={16}>
                <Col xs={24} sm={8}>
                  <Form.Item
                    name="weight"
                    label="Weight (carats)"
                    rules={[{ required: true, message: 'Please enter weight' }]}
                  >
                    <InputNumber min={0.01} step={0.01} style={{ width: '100%' }} placeholder="e.g., 2.5" />
                  </Form.Item>
                </Col>
                <Col xs={24} sm={8}>
                  <Form.Item
                    name="color"
                    label="Color"
                    rules={[{ required: true, message: 'Please select color' }]}
                  >
                    <Select placeholder="Select color">
                      {gemColors.map(color => (
                        <Option key={color} value={color}>{color}</Option>
                      ))}
                    </Select>
                  </Form.Item>
                </Col>
                <Col xs={24} sm={8}>
                  <Form.Item
                    name="shape"
                    label="Shape/Cut"
                    rules={[{ required: true, message: 'Please select shape' }]}
                  >
                    <Select placeholder="Select shape">
                      {gemShapes.map(shape => (
                        <Option key={shape} value={shape}>{shape}</Option>
                      ))}
                    </Select>
                  </Form.Item>
                </Col>
              </Row>
              <Row gutter={16}>
                <Col xs={24} sm={12}>
                  <Form.Item
                    name="origin"
                    label="Origin"
                    rules={[{ required: true, message: 'Please select origin' }]}
                  >
                    <Select placeholder="Select origin" defaultValue="Sri Lanka">
                      <Option value="Sri Lanka">Sri Lanka</Option>
                      <Option value="Thailand">Thailand</Option>
                      <Option value="Myanmar">Myanmar</Option>
                      <Option value="India">India</Option>
                      <Option value="Brazil">Brazil</Option>
                      <Option value="Other">Other</Option>
                    </Select>
                  </Form.Item>
                </Col>
                <Col xs={24} sm={12}>
                  <Form.Item
                    name="price"
                    label="Price (USD)"
                    rules={[{ required: true, message: 'Please enter price' }]}
                  >
                    <InputNumber
                      min={1}
                      style={{ width: '100%' }}
                      formatter={value => `$ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                      parser={value => {
                        if (value) {
                          return value.replace(/\$\s?|(,*)/g, '');
                        }
                        return '';
                      }}
                    />
                  </Form.Item>
                </Col>
              </Row>
              <Form.Item
                name="description"
                label="Description"
                rules={[{ required: true, message: 'Please enter description' }]}
              >
                <Input.TextArea rows={4} placeholder="Detailed description of the gemstone..." />
              </Form.Item>
            </TabPane>
            <TabPane tab="Images & Certificate" key="images">
              <Form.Item
                name="images"
                label="Gemstone Images"
                rules={[{ required: true, message: 'Please upload at least one image' }]}
              >
                <Upload
                  listType="picture-card"
                  fileList={uploadedImages}
                  beforeUpload={() => false}
                  onChange={({ fileList }) => setUploadedImages(fileList)}
                >
                  {uploadedImages.length < 5 && (
                    <div>
                      <PlusOutlined />
                      <div style={{ marginTop: 8 }}>Upload</div>
                    </div>
                  )}
                </Upload>
              </Form.Item>
              <Divider />
              <Form.Item
                name="hasCertificate"
                label="Gemstone Certificate"
                valuePropName="checked"
              >
                <Switch />
              </Form.Item>
              <Form.Item
                name="certificate"
                label="Upload Certificate (PDF or Image)"
                rules={[
                  ({ getFieldValue }) => ({
                    validator(_, value) {
                      if (!getFieldValue('hasCertificate') || certificateFile) {
                        return Promise.resolve();
                      }
                      return Promise.reject('Please upload a certificate file');
                    },
                  }),
                ]}
              >
                <Upload
                  maxCount={1}
                  beforeUpload={() => false}
                  onChange={handleCertificateUpload}
                >
                  <Button icon={<UploadOutlined />}>Upload Certificate</Button>
                </Upload>
              </Form.Item>
              <Form.Item
                name="certificateInfo"
                label="Certificate Information"
              >
                <Input.TextArea rows={2} placeholder="Certificate issuer, number, etc..." />
              </Form.Item>
            </TabPane>
            <TabPane tab="Price & Bidding" key="pricing">
              {showPrediction && pricePrediction ? (
                <Alert
                  type="info"
                  showIcon
                  className="mb-4"
                  message="Price Prediction"
                  description={
                    <div>
                      <p className="text-base font-semibold">
                        Recommended Price: ${pricePrediction.price?.toLocaleString() || '0'}
                      </p>
                      <p>
                        Price Range: ${pricePrediction.minPrice || '0'} - ${pricePrediction.maxPrice || '0'}
                      </p>
                    </div>
                  }
                />
              ) : null}
              <Row gutter={16}>
                <Col xs={24} sm={12}>
                  <Form.Item
                    name="price"
                    label="Listing Price (USD)"
                    rules={[{ required: true, message: 'Please enter price' }]}
                  >
                    <InputNumber
                      min={1}
                      style={{ width: '100%' }}
                      formatter={value => `$ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                      parser={value => {
                        if (value) {
                          return value.replace(/\$\s?|(,*)/g, '');
                        }
                        return '';
                      }}
                    />
                  </Form.Item>
                </Col>
                <Col xs={24} sm={12}>
                  <Form.Item
                    name="allowBidding"
                    label="Allow Bidding"
                    valuePropName="checked"
                  >
                    <Switch defaultChecked />
                  </Form.Item>
                </Col>
              </Row>
              <Form.Item
                name="minBidPrice"
                label="Minimum Accepted Bid Price (USD)"
                rules={[
                  ({ getFieldValue }) => ({
                    validator(_, value) {
                      if (!getFieldValue('allowBidding') || value) {
                        return Promise.resolve();
                      }
                      return Promise.reject('Please enter minimum bid price');
                    },
                  }),
                ]}
              >
                <InputNumber
                  min={1}
                  style={{ width: '100%' }}
                  formatter={value => `$ ${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                  parser={value => {
                    if (value) {
                      return value.replace(/\$\s?|(,*)/g, '');
                    }
                    return '';
                  }}
                />
              </Form.Item>
            </TabPane>
          </Tabs>
          <div className="mt-4 flex justify-end">
            <Button style={{ marginRight: 8 }} onClick={() => setAddListingVisible(false)}>
              Cancel
            </Button>
            <Button type="primary" htmlType="submit">
              Create Listing
            </Button>
          </div>
        </Form>
      </Modal>

      {/* Store Management Modal */}
      <Modal
        title="Manage Your Store"
        open={storeModalVisible}
        onCancel={() => setStoreModalVisible(false)}
        footer={null}
      >
        <Form
          form={storeForm}
          layout="vertical"
          onFinish={handleUpdateStore}
        >
          <Form.Item
            name="storeName"
            label="Store Name"
            rules={[{ required: true, message: 'Please enter store name' }]}
          >
            <Input placeholder="Your store name" />
          </Form.Item>
          <Form.Item
            name="storeDescription"
            label="Store Description"
            rules={[{ required: true, message: 'Please enter store description' }]}
          >
            <Input.TextArea rows={3} placeholder="Describe your store..." />
          </Form.Item>
          <Form.Item
            name="storeLocation"
            label="Store Location"
          >
            <Input placeholder="Physical location (if applicable)" />
          </Form.Item>
          <Form.Item
            name="storeLogo"
            label="Store Logo"
          >
            <Upload
              listType="picture-card"
              maxCount={1}
              beforeUpload={() => false}
              onChange={handleStoreLogoUpload}
            >
              <div>
                <PlusOutlined />
                <div style={{ marginTop: 8 }}>Upload</div>
              </div>
            </Upload>
          </Form.Item>
          <Form.Item
            name="contactEmail"
            label="Contact Email"
          >
            <Input placeholder="Your business email" />
          </Form.Item>
          <Form.Item
            name="contactPhone"
            label="Contact Phone"
          >
            <Input placeholder="Your business phone number" />
          </Form.Item>
          <div className="mt-4 flex justify-end">
            <Button style={{ marginRight: 8 }} onClick={() => setStoreModalVisible(false)}>
              Cancel
            </Button>
            <Button type="primary" htmlType="submit">
              Update Store
            </Button>
          </div>
        </Form>
      </Modal>
    </DashboardLayout>
  );
};

export default SellerDashboard;
